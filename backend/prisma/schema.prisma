// This is your Prisma schema file,
// learn more about it in the docs https//pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  nickname         String             @unique @db.VarChar(10)
  email            String             @unique @db.VarChar(100)
  profileImage     String?
  platform         Platform
  isAdmin          Boolean
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt
  deletedAt        DateTime?
  post             Post[]
  comment          Comment[]
  bookmarkCategory BookmarkCategory[]
}

model Post {
  id               Int                @id @default(autoincrement())
  title            String             @db.VarChar(20)
  emotion          Emotion
  content          String             @db.VarChar(500)
  author           User               @relation(fields: [authorId], references: [id])
  authorId         Int
  boardType        BoardType
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt
  deletedAt        DateTime?
  comment          Comment[]
  bookmark         Bookmark[]
  recommendContent RecommendContent[]
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String    @db.VarChar(100)
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int
  post      Post      @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
}

model Bookmark {
  id         Int              @id @default(autoincrement())
  post       Post             @relation(fields: [postId], references: [id])
  postId     Int
  category   BookmarkCategory @relation(fields: [categoryId], references: [id])
  categoryId Int
  createdAt  DateTime         @default(now())
  deletedAt  DateTime?
}

model BookmarkCategory {
  id        Int        @id @default(autoincrement())
  name      String?    @db.VarChar(20)
  user      User       @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  deletedAt DateTime?
  bookmark  Bookmark[]
}

model RecommendContent {
  id        Int       @id @default(autoincrement())
  post      Post      @relation(fields: [postId], references: [id])
  postId    Int
  movie     Movie?    @relation(fields: [movieId], references: [id])
  movieId   Int?
  music     Music?    @relation(fields: [musicId], references: [id])
  musicId   Int?
  book      Book?     @relation(fields: [bookId], references: [id])
  bookId    Int?
  createdAt DateTime  @default(now())
  deletedAt DateTime?
}

model Movie {
  id               Int                @id @default(autoincrement())
  title            String             @db.VarChar(50)
  emotion          Emotion
  recommendContent RecommendContent[]
}

model Music {
  id               Int                @id @default(autoincrement())
  title            String             @db.VarChar(50)
  emotion          Emotion
  recommendContent RecommendContent[]
}

model Book {
  id               Int                @id @default(autoincrement())
  title            String             @db.VarChar(50)
  emotion          Emotion
  recommendContent RecommendContent[]
}

enum BoardType {
  PUBLIC
  PRIVATE
  RECOMMEND
}

enum Emotion {
  HAPPINESS
  SADNESS
  ANGER
  FEAR
  LOVE
  SURPRISE
}

enum Platform {
  KAKAO
  NAVER
}
